//Recursive approach Exponential TC
int countBST(int n){
if(n==0 || n==1) return 1;
int ans=0;
for(int i=1 ; i<= n; i++){
int x = countBST(i - 1);
int y = countBST(n - i);
ans = ans + x*y;
}
return ans;
}

//top down O(N^2)
int countBST(int n , int[] dp){
if(n==0 || n==1) return 1;
if(dp[n] != 0) return dp[n];
int ans=0;
for(int i=1 ; i<= n; i++){
int x = countTD(i - 1, dp);
int y = countTD (n - i , dp);
ans = ans + x*y;
}
return dp[n]=ans;
}

//BOTTOM UP

int countBD(int N){
int[] dp= new int[N+1];
dp[0] = dp[1]=1;
for(int n=2 ; n<=N; n++){
for(int i=1 ; i<=n; i++){ // for smaller subprblm
dp[i] += dp[i - 1] * dp[ n - i];
}
}
return dp[N];
}
